diff --git a/node_modules/@elysiajs/eden/dist/treaty.d.mts b/node_modules/@elysiajs/eden/dist/treaty.d.mts
index f62373b..5c1e34a 100644
--- a/node_modules/@elysiajs/eden/dist/treaty.d.mts
+++ b/node_modules/@elysiajs/eden/dist/treaty.d.mts
@@ -102,11 +102,11 @@ declare class EdenWS<Schema extends InputSchema<any> = InputSchema> {
     ws: WebSocket;
     url: string;
     constructor(url: string);
-    send(data: Schema['body'] | Schema['body'][]): this;
-    on<K extends keyof WebSocketEventMap>(type: K, listener: (event: EdenTreaty.WSEvent<K, Schema['response']>) => void, options?: boolean | AddEventListenerOptions): this;
+    send(data: Schema['subscribe']['body'] | Schema['subscribe']['body'][]): this;
+    on<K extends keyof WebSocketEventMap>(type: K, listener: (event: EdenTreaty.WSEvent<K, Schema['subscribe']['response']>) => void, options?: boolean | AddEventListenerOptions): this;
     off<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | EventListenerOptions): this;
-    subscribe(onMessage: (event: EdenTreaty.WSEvent<'message', Schema['response']>) => void, options?: boolean | AddEventListenerOptions): this;
-    addEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (event: EdenTreaty.WSEvent<K, Schema['response']>) => void, options?: boolean | AddEventListenerOptions): this;
+    subscribe(onMessage: (event: EdenTreaty.WSEvent<'message', Schema['subscribe']['response']>) => void, options?: boolean | AddEventListenerOptions): this;
+    addEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (event: EdenTreaty.WSEvent<K, Schema['subscribe']['response']>) => void, options?: boolean | AddEventListenerOptions): this;
     removeEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | EventListenerOptions): this;
     close(): this;
 }
